#!/bin/bash

# Get the operating system
OS=$(uname -s)

# Variable to check if the daemon was started by this script
daemon_start_attempted=false

# Check if the Docker daemon is running based on the operating system, if not then start it
if [[ "$OS" == "Linux" ]]; then
    if ! systemctl is-active --quiet docker; then
        systemctl start docker
        daemon_start_attempted=true
    fi
elif [[ "$OS" == "Darwin" ]]; then
    if ! docker info > /dev/null 2>&1; then
        open --background -a Docker
        daemon_start_attempted=true
    fi
elif [[ "$OS" == "Windows_NT" ]]; then
    if ! sc query "Docker Engine" | grep "RUNNING" > /dev/null 2>&1; then
         Start-Service Docker
         daemon_start_attempted=true
    fi
else
    echo "Unsupported operating system. This script is only for Linux, MacOS, and Windows."
    exit 1
fi

# Check if the Docker daemon was started, if so wait and then check again if its running
if [ "$daemon_started" = true ]; then
    sleep 5
    if [[ "$OS" == "Linux" ]]; then
        if ! systemctl is-active --quiet docker; then
            echo "Docker daemon is not running. Start it and try again."
            exit 1
        fi
    elif [[ "$OS" == "Darwin" ]]; then
        if ! docker info > /dev/null 2>&1; then
            echo "Docker daemon is not running. Start it and try again."
            exit 1
        fi
    elif [[ "$OS" == "Windows_NT" ]]; then
        if ! sc query "Docker Engine" | grep "RUNNING" > /dev/null 2>&1; then
            echo "Docker daemon is not running. Start it and try again."
            exit 1
        fi
    fi
fi

# Check if the image has already been built
if [[ "$(docker images -q my-container 2> /dev/null)" == "" ]]; then
    # If it hasn't then build the Docker image
    docker build -t my-container .
fi

# Run the Docker image, mounting a volume to access the files generated by the script
docker run -it -v /host/path/:/container/path/ my-container